name: Build CI

on:
    push:
        branches: ["master"]
    pull_request:
    workflow_dispatch:

jobs:
    build:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}-${{ matrix.config.os-version }}

        strategy:
            fail-fast: false
            matrix:
                config:
                    # - name: Windows
                    #   os: windows
                    #   os-version: 2022

                    - name: Linux (GCC)
                      os: ubuntu
                      os-version: 24.04
                      use-clang: false

                    - name: Linux Clang (libstdc++)
                      os: ubuntu
                      os-version: 24.04
                      use-clang: true
                      use-clang_stdlib: false

                    - name: Linux Clang (libc++)
                      os: ubuntu
                      os-version: 24.04
                      use-clang: true
                      use-clang_stdlib: true

                    # - name: MacOS (x86_64)
                    #   os: macos
                    #   os-version: 13
                    #   arm: false

                    # - name: MacOS (Arm64)
                    #   os: macos
                    #   os-version: 14
                    #   arm: true

        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: "0"

            - name: Setup MSVC (Windows)
              if: matrix.config.os == 'windows'
              uses: TheMrMilchmann/setup-msvc-dev@v3
              with:
                  arch: x64

            - name: Setup Clang (Linux) (libc++)
              if: matrix.config.os == 'ubuntu' && matrix.config.use-clang == true && matrix.config.use-clang_stdlib
              run: |
                  wget https://apt.llvm.org/llvm.sh
                  chmod +x llvm.sh
                  sudo ./llvm.sh 20
                  sudo apt-get install libc++-20* libc++abi*20* -y --no-install-recommends
                  echo "CC=clang-20" >> "$GITHUB_ENV"
                  echo "CXX=clang++-20" >> "$GITHUB_ENV"
                  echo "OBJC=clang-20" >> "$GITHUB_ENV"

            - name: Setup Clang (Linux) (libstdc++)
              if: matrix.config.os == 'ubuntu' && matrix.config.use-clang == true && (! matrix.config.use-clang_stdlib)
              run: |
                  wget https://apt.llvm.org/llvm.sh
                  chmod +x llvm.sh
                  sudo ./llvm.sh 20
                  echo "CC=clang-20" >> "$GITHUB_ENV"
                  echo "CXX=clang++-20" >> "$GITHUB_ENV"
                  echo "OBJC=clang-20" >> "$GITHUB_ENV"

            - name: Setup GCC (Linux)
              if: matrix.config.os == 'ubuntu' && matrix.config.use-clang == false
              uses: egor-tensin/setup-gcc@v1
              with:
                  version: 14
                  platform: x64

            - name: Setup Clang (MacOS)
              if: matrix.config.os == 'macos'
              run: |
                  brew update
                  brew install llvm@20 lld@20
                  echo "$(brew --prefix)/opt/llvm/bin" >> $GITHUB_PATH
                  echo "LDFLAGS=-L$(brew --prefix)/opt/llvm/lib -L$(brew --prefix)/opt/llvm/lib/c++ -Wl,-rpath,$(brew --prefix)/opt/llvm/lib/c++" >> "$GITHUB_ENV"
                  echo "CPPFLAGS=-I$(brew --prefix)/opt/llvm/include" >> "$GITHUB_ENV"
                  echo "CC=clang" >> "$GITHUB_ENV"
                  echo "CXX=clang++" >> "$GITHUB_ENV"
                  echo "OBJC=clang" >> "$GITHUB_ENV"
                  echo "CC_LD=lld" >> "$GITHUB_ENV"
                  echo "CXX_LD=lld" >> "$GITHUB_ENV"
                  echo "OBJC_LD=lld" >> "$GITHUB_ENV"

            - name: Setup meson (MacOS)
              if: matrix.config.os == 'macos'
              run: |
                  brew update
                  brew install meson

            # NOTE: meson has no dependencies, so --break-system-packages doesn't really break anything!
            - name: Setup meson
              if: matrix.config.os != 'macos'
              run: |
                  pip install meson --break-system-packages

            - name: Install dependencies (Linux)
              if: matrix.config.os == 'ubuntu'
              run: |
                  sudo apt-get update
                  sudo apt-get install ninja-build postgresql-16 libpq-dev -y --no-install-recommends

            - name: Install dependencies (MacOS)
              if: matrix.config.os == 'macos'
              run: |
                  brew update
                  brew install libpq postgresql@16

            - name: Configure
              run: meson setup build -Dbuildtype=release

            - name: Build
              run: meson compile -C build
